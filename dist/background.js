const g={year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",hour12:!0};chrome.runtime.onMessage.addListener((s,n,e)=>{const t=s;return console.log(t.type),t.type==="new_meeting_started"&&chrome.tabs.query({active:!0,currentWindow:!0},o=>{var r;const i=(r=o[0])==null?void 0:r.id;i!==void 0&&chrome.storage.local.set({meetingTabId:i},()=>{console.log("Meeting tab id saved")})}),t.type==="meeting_ended"&&u().finally(()=>{L()}),t.type==="download_transcript_at_index"&&(typeof t.index=="number"&&t.index>=0?y(t.index,!1).then(()=>{e({success:!0})}).catch(o=>{const i={success:!1,message:o.message};e(i)}):e({success:!1,message:"Invalid index"})),t.type==="retry_webhook_at_index"&&(typeof t.index=="number"&&t.index>=0?S(t.index).then(()=>{e({success:!0})}).catch(o=>{console.error("Webhook retry failed:",o);const i={success:!1,message:o.message};e(i)}):e({success:!1,message:"Invalid index"})),t.type==="recover_last_meeting"&&x().then(o=>{e({success:!0,message:o})}).catch(o=>{const i={success:!1,message:o.message};e(i)}),!0});chrome.tabs.onRemoved.addListener(s=>{chrome.storage.local.get(["meetingTabId"],n=>{s===n.meetingTabId&&(console.log("Successfully intercepted tab close"),u().finally(()=>{L()}))})});chrome.runtime.onUpdateAvailable.addListener(()=>{chrome.storage.local.get(["meetingTabId"],s=>{s.meetingTabId?chrome.storage.local.set({isDeferredUpdatedAvailable:!0},()=>{console.log("Deferred update flag set")}):(console.log("No active meeting, applying update immediately"),chrome.runtime.reload())})});function u(){return new Promise((s,n)=>{U().then(()=>{chrome.storage.local.get(["meetings"],e=>{const t=e;chrome.storage.sync.get(["webhookUrl","autoPostWebhookAfterMeeting"],o=>{const i=o,r=[],a=t.meetings.length-1;r.push(y(a,!!(i.webhookUrl&&i.autoPostWebhookAfterMeeting))),i.autoPostWebhookAfterMeeting&&i.webhookUrl&&r.push(S(a)),Promise.all(r).then(()=>{s("Meeting processing and download/webhook posting complete")}).catch(c=>{console.error("Operation failed:",c),n(c)})})})}).catch(e=>{n(e)})})}function U(){return new Promise((s,n)=>{chrome.storage.local.get(["meetingTitle","meetingStartTimestamp","transcript","chatMessages"],e=>{const t=e;if(t.meetingStartTimestamp)if(t.transcript.length>0||t.chatMessages.length>0){const o={meetingTitle:t.meetingTitle,meetingStartTimestamp:t.meetingStartTimestamp,meetingEndTimestamp:new Date().toISOString(),transcript:t.transcript,chatMessages:t.chatMessages,webhookPostStatus:"new"};chrome.storage.local.get(["meetings"],i=>{let a=i.meetings||[];a.push(o),a.length>10&&(a=a.slice(-10)),chrome.storage.local.set({meetings:a},()=>{console.log("Last meeting picked up"),s("Last meeting picked up")})})}else n(new Error("Empty transcript and empty chatMessages"));else n(new Error("No meetings found. May be attend one?"))})})}function y(s,n){return new Promise((e,t)=>{chrome.storage.local.get(["meetings"],function(o){const i=o;if(i.meetings&&i.meetings[s]){const r=i.meetings[s],a=/[:?"*<>|~/\\\u{1}-\u{1f}\u{7f}\u{80}-\u{9f}\p{Cf}\p{Cn}]|^[.\u{0}\p{Zl}\p{Zp}\p{Zs}]|[.\u{0}\p{Zl}\p{Zp}\p{Zs}]$|^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(?=\.|$)/giu;let c="Google Meet call";r.meetingTitle?c=r.meetingTitle.replaceAll(a,"_"):r.title&&(c=r.title.replaceAll(a,"_"));const d=new Date(r.meetingStartTimestamp).toLocaleString("default",g).replace(/[\/:]/g,"-"),p=`TranscripTonic/Transcript-${c} at ${d}.txt`;let m=k(r.transcript);m+=`

---------------
CHAT MESSAGES
---------------

`,m+=M(r.chatMessages),m+=`

---------------
`,m+="Transcript saved using TranscripTonic Chrome extension (https://chromewebstore.google.com/detail/ciepnfnceimjehngolkijpnbappkkiag)",m+=`
---------------`;const v=new Blob([m],{type:"text/plain"}),f=new FileReader;f.readAsDataURL(v),f.onload=function(h){var T;if((T=h.target)!=null&&T.result){const w=h.target.result;chrome.downloads.download({url:w,filename:p,conflictAction:"uniquify"}).then(()=>{console.log("Transcript downloaded"),e("Transcript downloaded successfully"),fetch(`https://script.google.com/macros/s/AKfycbw4wRFjJcIoC5uDfscITSjNtUj83JVrBXKn44u9Cs0BoKNgyvt0A5hmG-xsJnlhfVu--g/exec?version=${chrome.runtime.getManifest().version}&isWebhookEnabled=${n}`,{mode:"no-cors"})}).catch(b=>{console.error(b),chrome.downloads.download({url:w,filename:"TranscripTonic/Transcript.txt",conflictAction:"uniquify"}),console.log("Invalid file name. Transcript downloaded to TranscripTonic directory with simple file name."),e("Transcript downloaded successfully with default file name"),fetch(`https://script.google.com/macros/s/AKfycbw4wRFjJcIoC5uDfscITSjNtUj83JVrBXKn44u9Cs0BoKNgyvt0A5hmG-xsJnlhfVu--g/exec?version=${chrome.runtime.getManifest().version}&code=009&error=${encodeURIComponent(b)}`,{mode:"no-cors"}),fetch(`https://script.google.com/macros/s/AKfycbzUk-q3N8_BWjwE90g9HXs5im1pYFriydKi1m9FoxEmMrWhK8afrHSmYnwYcw6AkH14eg/exec?version=${chrome.runtime.getManifest().version}&isWebhookEnabled=${n}`,{mode:"no-cors"})})}else t(new Error("Failed to read blob"))}}else t(new Error("Meeting at specified index not found"))})})}function S(s){return new Promise((n,e)=>{chrome.storage.local.get(["meetings"],function(t){const o=t;chrome.storage.sync.get(["webhookUrl","webhookBodyType"],function(i){const r=i;if(r.webhookUrl)if(o.meetings||o.meetings[s]){const a=o.meetings[s];let c;r.webhookBodyType==="advanced"?c={meetingTitle:a.meetingTitle||a.title||"",meetingStartTimestamp:new Date(a.meetingStartTimestamp).toISOString(),meetingEndTimestamp:new Date(a.meetingEndTimestamp).toISOString(),transcript:a.transcript,chatMessages:a.chatMessages}:c={meetingTitle:a.meetingTitle||a.title||"",meetingStartTimestamp:new Date(a.meetingStartTimestamp).toLocaleString("default",g).toUpperCase(),meetingEndTimestamp:new Date(a.meetingEndTimestamp).toLocaleString("default",g).toUpperCase(),transcript:k(a.transcript),chatMessages:M(a.chatMessages)},fetch(r.webhookUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(c)}).then(l=>{if(!l.ok)throw new Error(`Webhook request failed: ${l.status} ${l.statusText}`)}).then(()=>{o.meetings[s].webhookPostStatus="successful",chrome.storage.local.set({meetings:o.meetings},function(){n("Webhook posted successfully")})}).catch(l=>{console.error(l),o.meetings[s].webhookPostStatus="failed",chrome.storage.local.set({meetings:o.meetings},function(){chrome.notifications.create({type:"basic",iconUrl:"icon.png",title:"Could not post webhook!",message:"Click to view status and retry. Check console for more details."},function(d){chrome.notifications.onClicked.addListener(function(p){p===d&&chrome.tabs.create({url:"meetings.html"})})}),e(l)})})}else e(new Error("Meeting at specified index not found"));else e(new Error("No webhook URL configured"))})})})}function k(s){let n="";return s.length>0&&s.forEach(e=>{n+=`${e.personName} (${new Date(e.timestamp).toLocaleString("default",g).toUpperCase()})
`,n+=e.transcriptText,n+=`

`}),n}function M(s){let n="";return s.length>0&&s.forEach(e=>{n+=`${e.personName} (${new Date(e.timestamp).toLocaleString("default",g).toUpperCase()})
`,n+=e.chatMessageText,n+=`

`}),n}function L(){chrome.storage.local.set({meetingTabId:null},function(){console.log("Meeting tab id cleared for next meeting"),chrome.storage.local.get(["isDeferredUpdatedAvailable"],function(s){s.isDeferredUpdatedAvailable&&(console.log("Applying deferred update"),chrome.storage.local.set({isDeferredUpdatedAvailable:!1},function(){chrome.runtime.reload()}))})})}function x(){return new Promise((s,n)=>{chrome.storage.local.get(["meetings","meetingStartTimestamp"],function(e){const t=e;if(t.meetingStartTimestamp){const o=t.meetings[t.meetings.length-1];!o||t.meetingStartTimestamp!==o.meetingStartTimestamp?u().then(()=>{s("Recovered last meeting to the best possible extent")}).catch(i=>{n(i)}):s("No recovery needed")}else n("No meetings found. May be attend one?")})})}
