const g={year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",hour12:!0};function m(){return new Promise((t,e)=>{p().then(()=>{chrome.storage.local.get(["meetings"],n=>{const o=n;chrome.storage.sync.get(["webhookUrl","autoPostWebhookAfterMeeting"],s=>{const i=s,r=[],a=o.meetings.length-1;r.push(downloadTranscript(a,!!(i.webhookUrl&&i.autoPostWebhookAfterMeeting))),i.autoPostWebhookAfterMeeting&&i.webhookUrl&&r.push(f(a)),Promise.all(r).then(()=>{t("Meeting processing and download/webhook posting complete")}).catch(l=>{console.error("Operation failed:",l),e(l)})})})}).catch(n=>{e(n)})})}function p(){return new Promise((t,e)=>{chrome.storage.local.get(["meetingTitle","meetingStartTimestamp","transcript","chatMessages"],n=>{const o=n;if(o.meetingStartTimestamp)if(o.transcript.length>0||o.chatMessages.length>0){const s={meetingTitle:o.meetingTitle,meetingStartTimestamp:o.meetingStartTimestamp,meetingEndTimestamp:new Date().toISOString(),transcript:o.transcript,chatMessages:o.chatMessages,webhookPostStatus:"new"};chrome.storage.local.get(["meetings"],i=>{let a=i.meetings||[];a.push(s),a.length>10&&(a=a.slice(-10)),chrome.storage.local.set({meetings:a},()=>{console.log("Last meeting picked up"),t("Last meeting picked up")})})}else e(new Error("Empty transcript and empty chatMessages"));else e(new Error("No meetings found. May be attend one?"))})})}function f(t){return new Promise((e,n)=>{chrome.storage.local.get(["meetings"],function(o){const s=o;chrome.storage.sync.get(["webhookUrl","webhookBodyType"],function(i){const r=i;if(r.webhookUrl)if(s.meetings||s.meetings[t]){const a=s.meetings[t];let l;r.webhookBodyType==="advanced"?l={meetingTitle:a.meetingTitle||a.title||"",meetingStartTimestamp:new Date(a.meetingStartTimestamp).toISOString(),meetingEndTimestamp:new Date(a.meetingEndTimestamp).toISOString(),transcript:a.transcript,chatMessages:a.chatMessages}:l={meetingTitle:a.meetingTitle||a.title||"",meetingStartTimestamp:new Date(a.meetingStartTimestamp).toLocaleString("default",g).toUpperCase(),meetingEndTimestamp:new Date(a.meetingEndTimestamp).toLocaleString("default",g).toUpperCase(),transcript:b(a.transcript),chatMessages:w(a.chatMessages)},fetch(r.webhookUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(l)}).then(c=>{if(!c.ok)throw new Error(`Webhook request failed: ${c.status} ${c.statusText}`)}).then(()=>{s.meetings[t].webhookPostStatus="successful",chrome.storage.local.set({meetings:s.meetings},function(){e("Webhook posted successfully")})}).catch(c=>{console.error(c),s.meetings[t].webhookPostStatus="failed",chrome.storage.local.set({meetings:s.meetings},function(){chrome.notifications.create({type:"basic",iconUrl:"icon.png",title:"Could not post webhook!",message:"Click to view status and retry. Check console for more details."},function(u){chrome.notifications.onClicked.addListener(function(h){h===u&&chrome.tabs.create({url:"meetings.html"})})}),n(c)})})}else n(new Error("Meeting at specified index not found"));else n(new Error("No webhook URL configured"))})})})}function b(t){let e="";return t.length>0&&t.forEach(n=>{e+=`${n.personName} (${new Date(n.timestamp).toLocaleString("default",g).toUpperCase()})
`,e+=n.transcriptText,e+=`

`}),e}function w(t){let e="";return t.length>0&&t.forEach(n=>{e+=`${n.personName} (${new Date(n.timestamp).toLocaleString("default",g).toUpperCase()})
`,e+=n.chatMessageText,e+=`

`}),e}function d(){chrome.storage.local.set({meetingTabId:null},function(){console.log("Meeting tab id cleared for next meeting"),chrome.storage.local.get(["isDeferredUpdatedAvailable"],function(t){t.isDeferredUpdatedAvailable&&(console.log("Applying deferred update"),chrome.storage.local.set({isDeferredUpdatedAvailable:!1},function(){chrome.runtime.reload()}))})})}function T(){return new Promise((t,e)=>{chrome.storage.local.get(["meetings","meetingStartTimestamp"],function(n){const o=n;if(o.meetingStartTimestamp){const s=o.meetings[o.meetings.length-1];!s||o.meetingStartTimestamp!==s.meetingStartTimestamp?m().then(()=>{t("Recovered last meeting to the best possible extent")}).catch(i=>{e(i)}):t("No recovery needed")}else e("No meetings found. May be attend one?")})})}chrome.tabs.onRemoved.addListener(t=>{chrome.storage.local.get(["meetingTabId"],e=>{t===e.meetingTabId&&(console.log("Successfully intercepted tab close"),m().finally(()=>{d()}))})});chrome.runtime.onUpdateAvailable.addListener(()=>{chrome.storage.local.get(["meetingTabId"],t=>{t.meetingTabId?chrome.storage.local.set({isDeferredUpdatedAvailable:!0},()=>{console.log("Deferred update flag set")}):(console.log("No active meeting, applying update immediately"),chrome.runtime.reload())})});class y{canHandle(e){return e.type==="new_meeting_started"}handle(e){chrome.tabs.query({active:!0,currentWindow:!0},n=>{var s;const o=(s=n[0])==null?void 0:s.id;o!==void 0&&chrome.storage.local.set({meetingTabId:o},()=>{console.log("Meeting tab id saved")})})}}class S{canHandle(e){return e.type==="meeting_ended"}async handle(){await m(),d()}}class k{canHandle(e){return e.type==="recover_last_meeting"}async handle(e,n){try{const o=await T();n({success:!0,message:o})}catch(o){n({success:!1,message:o.message})}}}const M=[new y,new S,new k];chrome.runtime.onMessage.addListener((t,e,n)=>{const o=t;console.log(o),console.log(e),console.log(n);for(const s of M)if(s.canHandle(o))return s.handle(o,n),!0;return console.warn(`No handler found for message type: ${o.type}`),!1});
