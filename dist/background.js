const g={year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",hour12:!0};function p(){return new Promise((t,e)=>{L().then(()=>{chrome.storage.local.get(["meetings"],n=>{const o=n;chrome.storage.sync.get(["webhookUrl","autoPostWebhookAfterMeeting"],a=>{const r=a,i=[],s=o.meetings.length-1;i.push(U(s,!!(r.webhookUrl&&r.autoPostWebhookAfterMeeting))),r.autoPostWebhookAfterMeeting&&r.webhookUrl&&i.push(v(s)),Promise.all(i).then(()=>{t("Meeting processing and download/webhook posting complete")}).catch(c=>{console.error("Operation failed:",c),e(c)})})})}).catch(n=>{e(n)})})}function L(){return new Promise((t,e)=>{chrome.storage.local.get(["meetingTitle","meetingStartTimestamp","transcript","chatMessages"],n=>{const o=n;if(o.meetingStartTimestamp)if(o.transcript.length>0||o.chatMessages.length>0){const a={meetingTitle:o.meetingTitle,meetingStartTimestamp:o.meetingStartTimestamp,meetingEndTimestamp:new Date().toISOString(),transcript:o.transcript,chatMessages:o.chatMessages,webhookPostStatus:"new"};chrome.storage.local.get(["meetings"],r=>{let s=r.meetings||[];s.push(a),s.length>10&&(s=s.slice(-10)),chrome.storage.local.set({meetings:s},()=>{console.log("Last meeting picked up"),t("Last meeting picked up")})})}else e(new Error("Empty transcript and empty chatMessages"));else e(new Error("No meetings found. May be attend one?"))})})}function U(t,e){return new Promise((n,o)=>{chrome.storage.local.get(["meetings"],function(a){const r=a;if(r.meetings&&r.meetings[t]){const i=r.meetings[t],s=/[:?"*<>|~/\\\u{1}-\u{1f}\u{7f}\u{80}-\u{9f}\p{Cf}\p{Cn}]|^[.\u{0}\p{Zl}\p{Zp}\p{Zs}]|[.\u{0}\p{Zl}\p{Zp}\p{Zs}]$|^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(?=\.|$)/giu;let c="Google Meet call";i.meetingTitle?c=i.meetingTitle.replaceAll(s,"_"):i.title&&(c=i.title.replaceAll(s,"_"));const d=new Date(i.meetingStartTimestamp).toLocaleString("default",g).replace(/[\/:]/g,"-"),u=`TranscripTonic/Transcript-${c} at ${d}.txt`;let m=y(i.transcript);m+=`

---------------
CHAT MESSAGES
---------------

`,m+=S(i.chatMessages),m+=`

---------------
`,m+="Transcript saved using TranscripTonic Chrome extension (https://chromewebstore.google.com/detail/ciepnfnceimjehngolkijpnbappkkiag)",m+=`
---------------`;const k=new Blob([m],{type:"text/plain"}),h=new FileReader;h.readAsDataURL(k),h.onload=function(f){var w;if((w=f.target)!=null&&w.result){const T=f.target.result;chrome.downloads.download({url:T,filename:u,conflictAction:"uniquify"}).then(()=>{console.log("Transcript downloaded"),n("Transcript downloaded successfully"),fetch(`https://script.google.com/macros/s/AKfycbw4wRFjJcIoC5uDfscITSjNtUj83JVrBXKn44u9Cs0BoKNgyvt0A5hmG-xsJnlhfVu--g/exec?version=${chrome.runtime.getManifest().version}&isWebhookEnabled=${e}`,{mode:"no-cors"})}).catch(b=>{console.error(b),chrome.downloads.download({url:T,filename:"TranscripTonic/Transcript.txt",conflictAction:"uniquify"}),console.log("Invalid file name. Transcript downloaded to TranscripTonic directory with simple file name."),n("Transcript downloaded successfully with default file name"),fetch(`https://script.google.com/macros/s/AKfycbw4wRFjJcIoC5uDfscITSjNtUj83JVrBXKn44u9Cs0BoKNgyvt0A5hmG-xsJnlhfVu--g/exec?version=${chrome.runtime.getManifest().version}&code=009&error=${encodeURIComponent(b)}`,{mode:"no-cors"}),fetch(`https://script.google.com/macros/s/AKfycbzUk-q3N8_BWjwE90g9HXs5im1pYFriydKi1m9FoxEmMrWhK8afrHSmYnwYcw6AkH14eg/exec?version=${chrome.runtime.getManifest().version}&isWebhookEnabled=${e}`,{mode:"no-cors"})})}else o(new Error("Failed to read blob"))}}else o(new Error("Meeting at specified index not found"))})})}function v(t){return new Promise((e,n)=>{chrome.storage.local.get(["meetings"],function(o){const a=o;chrome.storage.sync.get(["webhookUrl","webhookBodyType"],function(r){const i=r;if(i.webhookUrl)if(a.meetings||a.meetings[t]){const s=a.meetings[t];let c;i.webhookBodyType==="advanced"?c={meetingTitle:s.meetingTitle||s.title||"",meetingStartTimestamp:new Date(s.meetingStartTimestamp).toISOString(),meetingEndTimestamp:new Date(s.meetingEndTimestamp).toISOString(),transcript:s.transcript,chatMessages:s.chatMessages}:c={meetingTitle:s.meetingTitle||s.title||"",meetingStartTimestamp:new Date(s.meetingStartTimestamp).toLocaleString("default",g).toUpperCase(),meetingEndTimestamp:new Date(s.meetingEndTimestamp).toLocaleString("default",g).toUpperCase(),transcript:y(s.transcript),chatMessages:S(s.chatMessages)},fetch(i.webhookUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(c)}).then(l=>{if(!l.ok)throw new Error(`Webhook request failed: ${l.status} ${l.statusText}`)}).then(()=>{a.meetings[t].webhookPostStatus="successful",chrome.storage.local.set({meetings:a.meetings},function(){e("Webhook posted successfully")})}).catch(l=>{console.error(l),a.meetings[t].webhookPostStatus="failed",chrome.storage.local.set({meetings:a.meetings},function(){chrome.notifications.create({type:"basic",iconUrl:"icon.png",title:"Could not post webhook!",message:"Click to view status and retry. Check console for more details."},function(d){chrome.notifications.onClicked.addListener(function(u){u===d&&chrome.tabs.create({url:"meetings.html"})})}),n(l)})})}else n(new Error("Meeting at specified index not found"));else n(new Error("No webhook URL configured"))})})})}function y(t){let e="";return t.length>0&&t.forEach(n=>{e+=`${n.personName} (${new Date(n.timestamp).toLocaleString("default",g).toUpperCase()})
`,e+=n.transcriptText,e+=`

`}),e}function S(t){let e="";return t.length>0&&t.forEach(n=>{e+=`${n.personName} (${new Date(n.timestamp).toLocaleString("default",g).toUpperCase()})
`,e+=n.chatMessageText,e+=`

`}),e}function M(){chrome.storage.local.set({meetingTabId:null},function(){console.log("Meeting tab id cleared for next meeting"),chrome.storage.local.get(["isDeferredUpdatedAvailable"],function(t){t.isDeferredUpdatedAvailable&&(console.log("Applying deferred update"),chrome.storage.local.set({isDeferredUpdatedAvailable:!1},function(){chrome.runtime.reload()}))})})}function A(){return new Promise((t,e)=>{chrome.storage.local.get(["meetings","meetingStartTimestamp"],function(n){const o=n;if(o.meetingStartTimestamp){const a=o.meetings[o.meetings.length-1];!a||o.meetingStartTimestamp!==a.meetingStartTimestamp?p().then(()=>{t("Recovered last meeting to the best possible extent")}).catch(r=>{e(r)}):t("No recovery needed")}else e("No meetings found. May be attend one?")})})}chrome.tabs.onRemoved.addListener(t=>{chrome.storage.local.get(["meetingTabId"],e=>{t===e.meetingTabId&&(console.log("Successfully intercepted tab close"),p().finally(()=>{M()}))})});chrome.runtime.onUpdateAvailable.addListener(()=>{chrome.storage.local.get(["meetingTabId"],t=>{t.meetingTabId?chrome.storage.local.set({isDeferredUpdatedAvailable:!0},()=>{console.log("Deferred update flag set")}):(console.log("No active meeting, applying update immediately"),chrome.runtime.reload())})});class E{canHandle(e){return e.type==="new_meeting_started"}handle(e){chrome.tabs.query({active:!0,currentWindow:!0},n=>{var a;const o=(a=n[0])==null?void 0:a.id;o!==void 0&&chrome.storage.local.set({meetingTabId:o},()=>{console.log("Meeting tab id saved")})})}}class C{canHandle(e){return e.type==="meeting_ended"}async handle(){await p(),M()}}class D{canHandle(e){return e.type==="recover_last_meeting"}async handle(e,n){try{const o=await A();n({success:!0,message:o})}catch(o){n({success:!1,message:o.message})}}}const I=[new E,new C,new D];chrome.runtime.onMessage.addListener((t,e,n)=>{const o=t;for(const a of I)if(a.canHandle(o))return a.handle(o,n),!0;return console.warn(`No handler found for message type: ${o.type}`),!1});
