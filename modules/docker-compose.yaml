version: "3.9"

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: au5-sqlserver
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD==FgBGa)>:Gc-U>#gL@~1
      - MSSQL_PID=Express
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - au5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: au5-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - au5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  au5-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: au5-backend
    ports:
      - "1366:8080"
    depends_on:
      - sqlserver
      - redis
    networks:
      - au5
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=Au5Db;User Id=sa;Password==FgBGa)>:Gc-U>#gL@~1;TrustServerCertificate=true
      - ConnectionStrings__Redis=redis:6379
    restart: unless-stopped

  # Bot Father Service
  au5-botfather:
    build:
      context: ./botFather
      dockerfile: Dockerfile
    container_name: au5-botfather
    ports:
      - "1367:8080"
    depends_on:
      - au5-backend
    networks:
      - au5
    environment:
      - DISPLAY=:99
    restart: unless-stopped

  # Panel Frontend
  au5-panel:
    build:
      context: ./panel
      dockerfile: Dockerfile
    container_name: au5-panel
    ports:
      - "1368:3000"
    depends_on:
      - au5-backend
    networks:
      - au5
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:1366
    restart: unless-stopped

volumes:
  sqlserver_data:
  redis_data:

networks:
  au5:
    driver: bridge
