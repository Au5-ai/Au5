// <auto-generated />
using System;
using Au5.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Au5.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250929201151_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Au5.Domain.Entities.AppliedReactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntryId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo_AppliedReactions");

                    b.HasIndex("EntryId");

                    b.HasIndex("ReactionId");

                    b.ToTable("AppliedReactions");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Assistant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Icon")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OpenAIAssistantId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Prompt")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("Assistant");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BlockId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("EntryType")
                        .HasMaxLength(14)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Timeline")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_dbo_Entry");

                    b.HasIndex("MeetingId");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("Au5.Domain.Entities.GuestsInMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id")
                        .HasName("PK_dbo_GuestsInMeeting");

                    b.HasIndex("MeetingId");

                    b.ToTable("GuestsInMeeting");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BotInviterUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BotName")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ClosedMeetingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("HashToken")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsBotAdded")
                        .HasColumnType("bit");

                    b.Property<string>("MeetId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MeetName")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Platform")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id")
                        .HasName("PK_dbo_Meeting");

                    b.HasIndex("BotInviterUserId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Icon = "ClosedCaption",
                            IsActive = true,
                            SortOrder = 1,
                            Title = "My Meetings",
                            Url = "/meetings/my"
                        },
                        new
                        {
                            Id = 200,
                            Icon = "ArchiveIcon",
                            IsActive = true,
                            SortOrder = 2,
                            Title = "Archived Transcripts",
                            Url = "/meetings/archived"
                        },
                        new
                        {
                            Id = 300,
                            Icon = "Brain",
                            IsActive = true,
                            SortOrder = 3,
                            Title = "AI Tools",
                            Url = "/assistants"
                        },
                        new
                        {
                            Id = 400,
                            Icon = "Settings",
                            IsActive = true,
                            SortOrder = 4,
                            Title = "System Settings",
                            Url = "/system"
                        },
                        new
                        {
                            Id = 500,
                            Icon = "UserPlus",
                            IsActive = true,
                            SortOrder = 5,
                            Title = "User Management",
                            Url = "/users"
                        });
                });

            modelBuilder.Entity("Au5.Domain.Entities.ParticipantInMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_dbo_ParticipantInMeeting");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("ParticipantInMeeting");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_dbo_Reaction");

                    b.ToTable("Reaction");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "reaction-task bg-blue-100 text-blue-700 border-blue-200",
                            Emoji = "⚡",
                            IsActive = false,
                            Type = "Task"
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "reaction-important bg-amber-100 text-amber-700 border-amber-200",
                            Emoji = "⭐",
                            IsActive = false,
                            Type = "GoodPoint"
                        },
                        new
                        {
                            Id = 3,
                            ClassName = "reaction-bug bg-rose-100 text-rose-700 border-rose-200",
                            Emoji = "🐞",
                            IsActive = false,
                            Type = "Bug"
                        });
                });

            modelBuilder.Entity("Au5.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<byte>("RoleType")
                        .HasColumnType("tinyint");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("RoleType", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenus", (string)null);

                    b.HasData(
                        new
                        {
                            RoleType = (byte)2,
                            MenuId = 100
                        },
                        new
                        {
                            RoleType = (byte)2,
                            MenuId = 200
                        },
                        new
                        {
                            RoleType = (byte)1,
                            MenuId = 300
                        },
                        new
                        {
                            RoleType = (byte)1,
                            MenuId = 400
                        },
                        new
                        {
                            RoleType = (byte)1,
                            MenuId = 500
                        });
                });

            modelBuilder.Entity("Au5.Domain.Entities.SystemConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AutoLeaveAllParticipantsLeft")
                        .HasColumnType("int");

                    b.Property<int>("AutoLeaveNoParticipant")
                        .HasColumnType("int");

                    b.Property<int>("AutoLeaveWaitingEnter")
                        .HasColumnType("int");

                    b.Property<string>("BotFatherUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BotHubUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BotName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("HubUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("MeetingAudioRecording")
                        .HasColumnType("bit");

                    b.Property<bool>("MeetingTranscription")
                        .HasColumnType("bit");

                    b.Property<string>("MeetingTranscriptionModel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("MeetingVideoRecording")
                        .HasColumnType("bit");

                    b.Property<string>("OpenAIProxyUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OpenAIToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PanelUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ServiceBaseUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SmtpHost")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SmtpPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("int");

                    b.Property<bool>("SmtpUseSSl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SmtpUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_dbo_SystemConfig");

                    b.ToTable("SystemConfig");
                });

            modelBuilder.Entity("Au5.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_dbo_User");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Au5.Domain.Entities.AppliedReactions", b =>
                {
                    b.HasOne("Au5.Domain.Entities.Entry", "Entry")
                        .WithMany("Reactions")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Au5.Domain.Entities.Reaction", "Reaction")
                        .WithMany()
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("Au5.Domain.Common.Participant", "Participants", b1 =>
                        {
                            b1.Property<int>("AppliedReactionsId")
                                .HasColumnType("int");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .HasMaxLength(200)
                                .IsUnicode(false)
                                .HasColumnType("varchar(200)");

                            b1.Property<string>("FullName")
                                .HasMaxLength(200)
                                .IsUnicode(false)
                                .HasColumnType("varchar(200)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PictureUrl")
                                .HasMaxLength(200)
                                .IsUnicode(false)
                                .HasColumnType("varchar(200)");

                            b1.HasKey("AppliedReactionsId", "__synthesizedOrdinal");

                            b1.ToTable("AppliedReactions");

                            b1.ToJson("Participants");

                            b1.WithOwner()
                                .HasForeignKey("AppliedReactionsId");
                        });

                    b.Navigation("Entry");

                    b.Navigation("Participants");

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Entry", b =>
                {
                    b.HasOne("Au5.Domain.Entities.Meeting", null)
                        .WithMany("Entries")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Au5.Domain.Entities.GuestsInMeeting", b =>
                {
                    b.HasOne("Au5.Domain.Entities.Meeting", "Meeting")
                        .WithMany("Guests")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Meeting", b =>
                {
                    b.HasOne("Au5.Domain.Entities.User", "User")
                        .WithMany("Meetings")
                        .HasForeignKey("BotInviterUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Menu", b =>
                {
                    b.HasOne("Au5.Domain.Entities.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Au5.Domain.Entities.ParticipantInMeeting", b =>
                {
                    b.HasOne("Au5.Domain.Entities.Meeting", "Meeting")
                        .WithMany("Participants")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Au5.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Au5.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("Au5.Domain.Entities.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Entry", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Meeting", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Guests");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Au5.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("Au5.Domain.Entities.User", b =>
                {
                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
